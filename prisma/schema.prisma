generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(cuid())
  clerkId       String         @unique
  email         String         @unique
  firstName     String?
  lastName      String?
  imageUrl      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  customers     Customer[]
  invoices      Invoice[]
  notifications Notification[]
  settings      UserSettings?

  @@map("users")
}

model Customer {
  id        String    @id @default(cuid())
  userId    String
  name      String
  email     String
  phone     String?
  address   String?
  taxId     String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  invoices  Invoice[]

  @@index([userId])
  @@index([email])
  @@map("customers")
}

model Invoice {
  id            String        @id @default(cuid())
  invoiceNumber String        @unique
  userId        String
  customerId    String
  issueDate     DateTime      @default(now())
  dueDate       DateTime
  status        InvoiceStatus @default(DRAFT)
  subtotal      Decimal       @db.Decimal(10, 2)
  tax           Decimal       @default(0) @db.Decimal(10, 2)
  discount      Decimal       @default(0) @db.Decimal(10, 2)
  total         Decimal       @db.Decimal(10, 2)
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  items         InvoiceItem[]
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([customerId])
  @@index([status])
  @@index([issueDate])
  @@index([dueDate])
  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(cuid())
  invoiceId   String
  description String
  quantity    Decimal  @db.Decimal(10, 2)
  unitPrice   Decimal  @db.Decimal(10, 2)
  total       Decimal  @db.Decimal(10, 2)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  invoice     Invoice  @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@index([invoiceId])
  @@map("invoice_items")
}

model UserSettings {
  id                String   @id @default(cuid())
  userId            String   @unique
  businessName      String?
  businessAddress   String?
  businessPhone     String?
  businessEmail     String?
  taxRate           Decimal  @default(17) @db.Decimal(5, 2)
  currency          String   @default("ILS")
  invoicePrefix     String   @default("INV")
  nextInvoiceNumber Int      @default(1)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  title     String
  message   String
  data      Json?
  read      Boolean          @default(false)
  actionUrl String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([read])
  @@map("notifications")
}

enum InvoiceStatus {
  DRAFT
  SENT
  PAID
  OVERDUE
  CANCELLED
}

enum NotificationType {
  INVOICE_CREATED
  INVOICE_OVERDUE
  INVOICE_PAID
  PAYMENT_RECEIVED
  REMINDER
  CUSTOMER_CREATED
  CUSTOMER_UPDATED
  CUSTOMER_DELETED
  SETTINGS_UPDATED
}
